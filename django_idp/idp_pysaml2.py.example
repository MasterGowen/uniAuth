import os
import saml2
from django.utils.translation import gettext as _
from saml2 import (BINDING_HTTP_POST,
                   BINDING_SOAP,
                   BINDING_HTTP_ARTIFACT,
                   BINDING_HTTP_REDIRECT,
                   BINDING_PAOS)
from saml2.saml import (NAMEID_FORMAT_TRANSIENT,
                        NAMEID_FORMAT_PERSISTENT)
from saml2.saml import (NAME_FORMAT_URI,
                        NAME_FORMAT_UNSPECIFIED,
                        NAME_FORMAT_BASIC)

from saml2.sigver import get_xmlsec_binary

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGIN_URL = '/login/'

# idp protocol:fqdn:port
HOST = 'idp1.testunical.it'
PORT = 9000
HTTPS = False

BASE = "https://{}".format(HOST) if HTTPS else "http://{}".format(HOST)
if PORT:
    BASE += ':{}'.format(PORT)

BASE_URL = '{}/idp'.format(BASE)
# end

IDP_CONF_PATH = os.path.join(BASE_DIR, 'idp')
IDP_SP_METADATA_PATH = os.path.join(IDP_CONF_PATH, 'saml2_config/metadata')

# please check [Refactor datetime](https://github.com/IdentityPython/pysaml2/pull/518)
SAML2_DATETIME_FORMATS = ['%Y-%m-%dT%H:%M:%SZ','%Y%m%d%H%M%SZ']

SAML_IDP_CONFIG = {
    'debug' : True,
    'xmlsec_binary': get_xmlsec_binary(['/opt/local/bin', '/usr/bin/xmlsec1']),
    'entityid': '%s/metadata' % BASE_URL,
    'attribute_map_dir': 'data/attribute-maps',
    'description': 'SAML2 IDP',

    'service': {
        'idp': {
            'name': 'Django testunical SAML IdP',

            'ui_info': {
                'display_name': {'lang': 'en', 'text': 'IDP testunical'},
                'description': {'lang': 'en', 'text': 'IDP testunical'},
                'logo': {'width': '100',
                         'height': '50',
                         'text': "https://{}/static/img/logo.svg".format(HOST)},
                },

            'endpoints': {
                'single_sign_on_service': [
                    ('%s/sso/post' % BASE_URL, BINDING_HTTP_POST),
                    ('%s/sso/redirect' % BASE_URL, BINDING_HTTP_REDIRECT),
                    # TODO
                    # ("%s/sso/art" % BASE, BINDING_HTTP_ARTIFACT),
                ],
                "single_logout_service": [
                    ("%s/slo/post" % BASE, BINDING_HTTP_POST),
                    ("%s/slo/redirect" % BASE, BINDING_HTTP_REDIRECT)
                    # ("%s/slo/soap" % BASE, BINDING_SOAP),
                ],
            },
            # transient per default, persistent if asked by sp
            'name_id_format': [NAMEID_FORMAT_TRANSIENT,
                               NAMEID_FORMAT_PERSISTENT],

            'validate_certificate': True,
            "want_authn_requests_only_with_valid_cert": True,
            # this is default
            'only_use_keys_in_metadata': True,

            'want_authn_requests_signed': True,
            'sign_response': True,
            'sign_assertion': True,
            'logout_requests_signed': True,

            # the following if set should be a cert filename, not a boolean
            # 'verify_ssl_cert': None,
            # 'verify_encrypt_cert_assertion': None,
            # 'verify_encrypt_cert_advice': None,

            # this works if pysaml2 is installed from peppelinux's fork
            # 'signing_algorithm':  saml2.xmldsig.SIG_RSA_SHA256,
            # 'digest_algorithm':  saml2.xmldsig.DIGEST_SHA256,

            "policy": {
                "default": {
                    "lifetime": {"minutes": 15},

                    # if the sp is not conform to entity_categories the attributes will not be released
                    # "entity_categories": ["refeds", "edugain"],

                    "name_form": NAME_FORMAT_URI,

                    # global pysaml2 restrictions, useless with custom AttributeProcessors
                    # "attribute_restrictions": {
                        # 'username': None,
                        # 'first_name': None,
                        # 'last_name': None,
                        #
                        ## Here only mail addresses that end with ".umu.se" will be returned.
                        # 'email': None,
                        # #'email': [".*\.umu\.se$"],
                        # "mail": [".*\.umu\.se$"],
                    # },
                },
                # "https://example.com/sp": {
                    # "lifetime": {"minutes": 5},
                    # "nameid_format": NAMEID_FORMAT_PERSISTENT,
                    # "name_form": NAME_FORMAT_BASIC
                # }
            },

        },
    },

    'metadata': {
        'local': [
                 # (os.path.join(IDP_SP_METADATA_PATH, 'sp_metadata.xml'),),
                 # (os.path.join(IDP_SP_METADATA_PATH, 'sp_shib_metadata.xml'),),
                 # (os.path.join(IDP_SP_METADATA_PATH, 'satosa_backend.xml'),),
                 ],
        #
        # "remote": [{
            # "url": 'https://satosa.testunical.it/Saml2/metadata',
            # "cert": "/opt/satosa-saml2/pki/frontend.cert",
            # "disable_ssl_certificate_validation": True,
             # }],

        # "mdq": [{
            # "url": "http://localhost:8001",
            ## "url": "https://ds.testunical.it",
            # "cert": "certficates/others/ds.testunical.it.cert",
            # "disable_ssl_certificate_validation": True,
            # }]

    },

    # Signing
    'key_file': BASE_DIR + '/certificates/private_key.pem',
    'cert_file': BASE_DIR + '/certificates/public_key.pem',
    # Encryption
    'encryption_keypairs': [{
        'key_file': BASE_DIR + '/certificates/private_key.pem',
        'cert_file': BASE_DIR + '/certificates/public_key.pem',
    }],

    # How many hours this configuration is expected to be accurate.
    # This of course is only used by make_metadata.py. The server will not stop working when this amount of time has elapsed :-).
    'valid_for': 24 * 10,

    # own metadata settings
    'contact_person': [
      {'given_name': 'Giuseppe',
       'sur_name': 'De Marco',
       'company': 'Universita della Calabria',
       'email_address': 'giuseppe.demarco@unical.it',
       'contact_type': 'administrative'},
      {'given_name': 'Giuseppe',
       'sur_name': 'De Marco',
       'company': 'Universita della Calabria',
       'email_address': 'giuseppe.demarco@unical.it',
       'contact_type': 'technical'},
      ],
    # you can set multilanguage information here
    'organization': {
      'name': [('Unical', 'it'), ('Unical', 'en')],
      'display_name': [('Unical', 'it'), ('Unical', 'en')],
      'url': [('http://www.unical.it', 'it'),
              ('http://www.unical.it', 'en')],
      },

    # TODO: put idp logs in a separate file too
    # "logger": {
        # "rotating": {
            # "filename": "idp.log",
            # "maxBytes": 500000,
            # "backupCount": 5,
        # },
        # "loglevel": "debug",
    # }

}

SAML_IDP_SHOW_USER_AGREEMENT_SCREEN = True
SAML_IDP_SHOW_CONSENT_FORM = False
SAML_IDP_USER_AGREEMENT_ATTR_EXCLUDE = []
# User agreements will be valid for 1 year unless overriden. If this attribute is not used, user agreements will not expire
SAML_IDP_USER_AGREEMENT_VALID_FOR = 24 * 365

#SAML_IDP_DJANGO_USERNAME_FIELD = 'username'

SAML_COMPUTEDID_HASHALG = 'sha256'
SAML_AUTHN_SIGN_ALG = saml2.xmldsig.SIG_RSA_SHA256
SAML_AUTHN_DIGEST_ALG = saml2.xmldsig.DIGEST_SHA256

# Encrypt authn response
SAML_ENCRYPT_AUTHN_RESPONSE = True

# SP configurations
SAML_IDP_SPCONFIG = {}
DEFAULT_SPCONFIG = {
    'processor': 'idp.processors.LdapAcademiaProcessor',
    'attribute_mapping': {
        'eduPersonTargetedID': 'eduPersonTargetedID',
        'schacPersonalUniqueID': 'schacPersonalUniqueID',
        'eduPersonPrincipalName': 'eduPersonPrincipalName',
        'eduPersonEntitlement': 'eduPersonEntitlement',
        'eduPersonScopedAffiliation': 'eduPersonScopedAffiliation',
        'schacPersonalUniqueCode': 'schacPersonalUniqueCode',
        'cn': 'cn',
        'sn': 'sn',
        'mail': 'mail',
    },
    'display_name': 'Unical SP',
    'display_description': 'This is for test purpose',
    'display_agreement_message': 'Some information about you has been requested', # Only for SP externals to our organization
    'signing_algorithm': saml2.xmldsig.SIG_RSA_SHA256,
    'digest_algorithm': saml2.xmldsig.DIGEST_SHA256,
    # 'encrypt_saml_responses': False,
    # 'show_user_agreement_screen': SAML_IDP_SHOW_USER_AGREEMENT_SCREEN
}

# shibboleth test SP
# SAML_IDP_SPCONFIG['https://sp.testunical.it/shibboleth'] = DEFAULT_SPCONFIG
# SAML_IDP_SPCONFIG['https://sp1.testunical.it/saml2/metadata/'] = DEFAULT_SPCONFIG

# satosa frontend
# SAML_IDP_SPCONFIG['https://satosa.testunical.it/Saml2/metadata'] = DEFAULT_SPCONFIG
